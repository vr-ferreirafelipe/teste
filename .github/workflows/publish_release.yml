name: Publish Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  call-check-commit:
    name: Call Check Commit
    uses: ./.github/workflows/check-commits.yml
    secrets:
      VR_PACKAGE_TOKEN: ${{ secrets.VRPACKAGETOKEN }}

  call-generate-release-tag:
    name: Call Generate release tag
    uses: ./.github/workflows/generate-release-tag.yml
    if: needs.call-check-commit.outputs.has_changes
    needs: call-check-commit
    with:
      HAS_CHANGES: ${{ needs.call-check-commit.outputs.has_changes }}
      COMMIT_MESSAGES: ${{ needs.call-check-commit.outputs.commit_message }}
    secrets:
      VR_PACKAGE_TOKEN: ${{ secrets.VRPACKAGETOKEN }}

  publish_release:
    name: Publish Release
    if: needs.call-check-commit.outputs.has_changes && ${{ always() }}
    needs: 
      - call-check-commit
      - call-generate-release-tag

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0
          ref: main

      - name: Git Config
        run: git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com" && git config --global user.name "${GITHUB_ACTOR}"

      - name: Upgrade Release
        id: upgrade_release
        run: |
          NEW_VERSION=${{ steps.check_version.outputs.NEW_VERSION }}

          npm --no-git-tag-version version $NEW_VERSION
          git add . 
          git commit -m "Entrega da versão $NEW_VERSION"
      
      - name: Create Release
        id: create_release
        if: steps.check_version.outputs.has_release == 'true' && steps.check_new_release.outputs.is_valid_version == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.VRPACKAGETOKEN }}
        with:
          tag_name: ${{ steps.check_version.outputs.new_version }}
          release_name: Release ${{ steps.check_version.outputs.new_version }}


  #   name: Generate Tag
  #   if: needs.call-check-commit.outputs.has_changes
  #   needs: call-check-commit
  #   outputs:
  #     version: ${{ job.tag }}
  #     current_version: ${{ job.current_version }}
  #     has_release: ${{ job.has_release }}
    
  #   runs-on: ubuntu-latest

    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v3
    #     with:
    #       token: ${{ secrets.VR_PACKAGE_TOKEN }}
    #       fetch-depth: 0
    #       ref: main

    #   - name: Git Config
    #     run: git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com" && git config --global user.name "${GITHUB_ACTOR}"
        
    #   # - name: Get Current Tag 
    #   #   id: get_current_tag
    #   #   run: |
    #   #     # Inicialize uma variável de versão com a última tag
    #   #     CURRENT_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
    #   #     echo "::set-output name=current_version::$CURRENT_VERSION"

    #   # - name: Check Version 
    #   #   id: check_version
    #   #   run: |
    #   #     echo "PASSOU NO Check Version "
    #   #     HAS_RELEASE="true"

    #   #     COMMIT_MESSAGES="${{ needs.call-check-commit.outputs.commit_message }}"
    #   #     VERSION=${{ steps.get_current_tag.outputs.current_version }}

    #   #     MAJOR_VERSION=$(echo "$VERSION" | cut -d. -f1)
    #   #     MINOR_VERSION=$(echo "$VERSION" | cut -d. -f2)
    #   #     PATCH_VERSION=$(echo "$VERSION" | cut -d. -f3)

    #   #     if [[ $COMMIT_MESSAGES =~ "BREAKING CHANGE" ]]; then
    #   #       # Gera nova tag MAJOR
    #   #       NEW_VERSION="$((MAJOR_VERSION + 1)).0.0"
    #   #     elif [[ $COMMIT_MESSAGES =~ "feat" ]]; then
    #   #       # Gera nova tag MINOR
    #   #       NEW_VERSION="$MAJOR_VERSION.$((MINOR_VERSION + 1)).0"
    #   #     elif [[ $COMMIT_MESSAGES =~ "fix" ]]; then
    #   #       # Gera nova tag patch
    #   #       NEW_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$((PATCH_VERSION + 1))"
    #   #     else
    #   #       # Nenhum commit gerará uma nova release
    #   #       echo "Nenhum commit nesta push gerará uma nova release."
    #   #       NEW_VERSION=""
    #   #       HAS_RELEASE="false"
    #   #     fi 

    #   #     echo "::set-output name=has_release::$HAS_RELEASE"
    #   #     echo "::set-output name=new_version::$NEW_VERSION"
    #   #   shell: bash

    #   # - name: Check New Release 
    #   #   id: check_new_release
    #   #   if: steps.check_version.outputs.has_release == 'true'
    #   #   run: |
    #   #     $IS_VALID_VERSION="false"

    #   #     CURRENT_VERSION=${{ steps.get_current_tag.outputs.current_version }}
    #   #     echo "CURRENT_VERSION $CURRENT_VERSION"
    #   #     $CURRENT_MAJOR_VERSION=$(echo "$CURRENT_VERSION" | cut -d. -f1)
    #   #     $CURRENT_MINOR_VERSION=$(echo "$CURRENT_VERSION" | cut -d. -f2)
    #   #     $CURRENT_PATCH_VERSION=$(echo "$CURRENT_VERSION" | cut -d. -f3)
          
    #   #     NEW_VERSION=${{ steps.check_version.outputs.new_version }}
    #   #     echo "CURRENT_VERSION $NEW_VERSION"
    #   #     $NEW_MAJOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f1)
    #   #     $NEW_MINOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f2)
    #   #     $NEW_PATCH_VERSION=$(echo "$NEW_VERSION" | cut -d. -f3)

    #   #     if [[ $NEW_MAJOR_VERSION > CURRENT_MAJOR_VERSION ]]; then
    #   #       IS_VALID_VERSION="true"
    #   #     elif [[ $NEW_MAJOR_VERSION == CURRENT_MAJOR_VERSION ]] && [[ $NEW_MINOR_VERSION > CURRENT_MINOR_VERSION ]]; then
    #   #       IS_VALID_VERSION="true"
    #   #     elif [[ $NEW_MINOR_VERSION == CURRENT_MINOR_VERSION ]] && [[ $NEW_PATCH_VERSION > CURRENT_PATCH_VERSION ]]; then
    #   #       IS_VALID_VERSION="true"
    #   #     fi

    #   #     echo "::set-output name=is_valid_version::$IS_VALID_VERSION"

    #   - name: Upgrade Release
    #     id: updagrade_release
    #     if: steps.check_new_release.outputs.is_valid_version == 'true'
    #     run: |
    #       NEW_VERSION=${{ steps.check_version.outputs.new_version }}
    #       npm --no-git-tag-version version $NEW_VERSION
    #       git add . 
    #       git commit -m "Entrega da versão $NEW_VERSION"

    #   - name: Create Release
    #     id: create_release
    #     if: steps.check_version.outputs.has_release == 'true' && steps.check_new_release.outputs.is_valid_version == 'true'
    #     uses: actions/create-release@v1
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.VR_PACKAGE_TOKEN }}
    #     with:
    #       tag_name: ${{ steps.check_version.outputs.new_version }}
    #       release_name: Release ${{ steps.check_version.outputs.new_version }}

